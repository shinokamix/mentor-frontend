// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/review.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MentorService_MethodMentorRating_FullMethodName = "/mentor.MentorService/MethodMentorRating"
	MentorService_NewMentor_FullMethodName          = "/mentor.MentorService/NewMentor"
	MentorService_CheckMentor_FullMethodName        = "/mentor.MentorService/CheckMentor"
)

// MentorServiceClient is the client API for MentorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MentorServiceClient interface {
	MethodMentorRating(ctx context.Context, in *RatingRequest, opts ...grpc.CallOption) (*Response, error)
	NewMentor(ctx context.Context, in *MentorRequest, opts ...grpc.CallOption) (*Response, error)
	CheckMentor(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type mentorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMentorServiceClient(cc grpc.ClientConnInterface) MentorServiceClient {
	return &mentorServiceClient{cc}
}

func (c *mentorServiceClient) MethodMentorRating(ctx context.Context, in *RatingRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, MentorService_MethodMentorRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentorServiceClient) NewMentor(ctx context.Context, in *MentorRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, MentorService_NewMentor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentorServiceClient) CheckMentor(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, MentorService_CheckMentor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MentorServiceServer is the server API for MentorService service.
// All implementations must embed UnimplementedMentorServiceServer
// for forward compatibility.
type MentorServiceServer interface {
	MethodMentorRating(context.Context, *RatingRequest) (*Response, error)
	NewMentor(context.Context, *MentorRequest) (*Response, error)
	CheckMentor(context.Context, *CheckRequest) (*CheckResponse, error)
	mustEmbedUnimplementedMentorServiceServer()
}

// UnimplementedMentorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMentorServiceServer struct{}

func (UnimplementedMentorServiceServer) MethodMentorRating(context.Context, *RatingRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodMentorRating not implemented")
}
func (UnimplementedMentorServiceServer) NewMentor(context.Context, *MentorRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMentor not implemented")
}
func (UnimplementedMentorServiceServer) CheckMentor(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMentor not implemented")
}
func (UnimplementedMentorServiceServer) mustEmbedUnimplementedMentorServiceServer() {}
func (UnimplementedMentorServiceServer) testEmbeddedByValue()                       {}

// UnsafeMentorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MentorServiceServer will
// result in compilation errors.
type UnsafeMentorServiceServer interface {
	mustEmbedUnimplementedMentorServiceServer()
}

func RegisterMentorServiceServer(s grpc.ServiceRegistrar, srv MentorServiceServer) {
	// If the following call pancis, it indicates UnimplementedMentorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MentorService_ServiceDesc, srv)
}

func _MentorService_MethodMentorRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MentorServiceServer).MethodMentorRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MentorService_MethodMentorRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MentorServiceServer).MethodMentorRating(ctx, req.(*RatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MentorService_NewMentor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MentorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MentorServiceServer).NewMentor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MentorService_NewMentor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MentorServiceServer).NewMentor(ctx, req.(*MentorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MentorService_CheckMentor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MentorServiceServer).CheckMentor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MentorService_CheckMentor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MentorServiceServer).CheckMentor(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MentorService_ServiceDesc is the grpc.ServiceDesc for MentorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MentorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mentor.MentorService",
	HandlerType: (*MentorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MethodMentorRating",
			Handler:    _MentorService_MethodMentorRating_Handler,
		},
		{
			MethodName: "NewMentor",
			Handler:    _MentorService_NewMentor_Handler,
		},
		{
			MethodName: "CheckMentor",
			Handler:    _MentorService_CheckMentor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/review.proto",
}
