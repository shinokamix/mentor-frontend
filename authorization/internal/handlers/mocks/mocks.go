// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	model "mentorlink/internal/domain/model"

	mock "github.com/stretchr/testify/mock"
	"time"
	"mentorlink/pkg/token"
	"context"
)

// UserCreater is an autogenerated mock type for the UserCreater type
type UserCreater struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: u
func (_m *UserCreater) CreateUser(u *model.User) error {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserCreater) GetByEmail(email string) (*model.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserCreater creates a new instance of UserCreater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserCreater(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserCreater {
	mock := &UserCreater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}


// RedisRepo is an autogenerated mock type for the RedisRepo type
type RedisRepo struct {
	mock.Mock
}

// AddToBlackList provides a mock function with given fields: token, exp
func (_m *RedisRepo) AddToBlackList(token string, exp int64) error {
	ret := _m.Called(token, exp)

	if len(ret) == 0 {
		panic("no return value specified for AddToBlackList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(token, exp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsBlackListed provides a mock function with given fields: token
func (_m *RedisRepo) IsBlackListed(token string) (bool, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for IsBlackListed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRedisRepo creates a new instance of RedisRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisRepo {
	mock := &RedisRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}


// TokenMn is an autogenerated mock type for the TokenMn type
type TokenMn struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: userID, role, ttl, tokenType
func (_m *TokenMn) GenerateToken(userID int64, role string, ttl time.Duration, tokenType string) (string, error) {
	ret := _m.Called(userID, role, ttl, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, time.Duration, string) (string, error)); ok {
		return rf(userID, role, ttl, tokenType)
	}
	if rf, ok := ret.Get(0).(func(int64, string, time.Duration, string) string); ok {
		r0 = rf(userID, role, ttl, tokenType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int64, string, time.Duration, string) error); ok {
		r1 = rf(userID, role, ttl, tokenType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: tokenStr
func (_m *TokenMn) ParseToken(tokenStr string) (*token.Claims, error) {
	ret := _m.Called(tokenStr)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 *token.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*token.Claims, error)); ok {
		return rf(tokenStr)
	}
	if rf, ok := ret.Get(0).(func(string) *token.Claims); ok {
		r0 = rf(tokenStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenMn creates a new instance of TokenMn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenMn(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenMn {
	mock := &TokenMn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// NewMentor is an autogenerated mock type for the NewMentor type
type NewMentor struct {
	mock.Mock
}

// NewMentor provides a mock function with given fields: ctx, mentorEmail, contact
func (_m *NewMentor) NewMentor(ctx context.Context, mentorEmail string, contact string) error {
	ret := _m.Called(ctx, mentorEmail, contact)

	if len(ret) == 0 {
		panic("no return value specified for NewMentor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, mentorEmail, contact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNewMentor creates a new instance of NewMentor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewMentor(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewMentor {
	mock := &NewMentor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
