services:
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./api-gateway/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
     - app-network

  api-gateway-server:
    container_name: api-gateway-server
    build: 
      context: ./api-gateway
      dockerfile: Dockerfile
    env_file:  
      - ./api-gateway/.env
    volumes:
      - ./api-gateway/.env:/app/.env
    networks:
      - app-network

  auth-service-postgres:
    image: postgres:15
    env_file:
      - ./authorization/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./authorization/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d mentors"]
      interval: 10s
      timeout: 5s
      retries: 5  
    networks:
      - app-network

  auth-service-redis:
    image: redis:7
    env_file:
      - ./authorization/.env
    command: redis-server --requirepass 123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  auth-server:
    container_name: auth-server
    build:
      context: ./authorization
      dockerfile: Dockerfile
    env_file:
      - ./authorization/.env
    volumes:
      - ./authorization/.env:/app/.env
    depends_on:
      auth-service-redis:
        condition: service_healthy
      auth-service-postgres:
        condition: service_healthy
    networks:
      - app-network

  review-service-postgres:
    image: postgres:15
    env_file:
      - ./review/.env
    volumes:
      - postgres_data1:/var/lib/postgresql/data
      - ./review/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin1 -d reviews"]
      interval: 10s
      timeout: 5s
      retries: 5  
    networks:
     - app-network
  
  review-service-redis:
    image: redis:7
    env_file:
       - ./review/.env
    command: redis-server --requirepass 1234
    volumes:
      - redis_data1:/data
    ports:
      - "6380:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
     - app-network
  
  review-server:
    container_name: review-server
    build:
      context: ./review
      dockerfile: Dockerfile
    env_file:
      - ./review/.env
    volumes:
      - ./review/.env:/app/.env
    depends_on:
      kafka:
        condition: service_healthy
      review-service-redis:
        condition: service_healthy
      review-service-postgres:
        condition: service_healthy
    networks:
      - app-network

  rating-server:
    container_name: rating-server
    build:
      context: ./rating
      dockerfile: Dockerfile
    env_file:
      - ./rating/.env
    volumes:
      - ./rating/.env:/app/.env
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network

  mentor-service-postgres:
    image: postgres:15
    env_file:
      - ./mentor/.env
    volumes:
      - postgres_data2:/var/lib/postgresql/data
      - ./mentor/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5435:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin3 -d mentorss"]
      interval: 10s
      timeout: 5s
      retries: 5  
    networks:
     - app-network
  
  mentor-service-redis:
    image: redis:7
    env_file:
       - ./mentor/.env
    command: redis-server --requirepass 12345
    volumes:
      - redis_data2:/data
    ports:
      - "6381:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
     - app-network
  
  mentor-server:
    container_name: mentor-server
    build:
      context: ./mentor
      dockerfile: Dockerfile
    env_file:
      - ./mentor/.env
    volumes:
      - ./mentor/.env:/app/.env
    depends_on:
      mentor-service-redis:
        condition: service_healthy
      mentor-service-postgres:
        condition: service_healthy
    networks:
      - app-network


  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
     - app-network
    
  kafka:
    image: wurstmeister/kafka
    ports:
    - "9092:9092"
    - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
     - app-network
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8087:8087"
    depends_on:
      - kafka
    environment:
      SERVER_PORT: "8087" 
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
     - app-network

  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-network

  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./monitoring/promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - app-network
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - loki


volumes:
  postgres_data:
  redis_data:
  postgres_data1:
  redis_data1:
  postgres_data2:
  redis_data2:

networks:
  app-network:
    driver: bridge
